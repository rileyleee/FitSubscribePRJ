<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bodyguard.gyudok.model.dao.UserDao">

	<!-- 아이디로 회원정보 가져오기 -->
	<select id="selectOne" parameterType="String" resultType="User">
		SELECT
		*
		FROM `USER`
		WHERE id = #{id}
	</select>

	<!-- (닉네임으로 회원정보 가져오기 또는 지역으로 가져오기)와 그 회원정보가 트레이너 -->
	<select id="selectNickName" parameterType="String"
		resultType="User">
		SELECT *
		FROM `USER`
		<choose>
			<when test="nickname != null">
				WHERE (nickname LIKE
				CONCAT('%',#{nickname},'%') or
				address2 LIKE
				CONCAT('%',#{nickname},'%') or address1 LIKE
				CONCAT('%',#{nickname},'%')) AND expert = 1
			</when>
			<otherwise>
				WHERE expert = 1
			</otherwise>
		</choose>
	</select>

	<!--유저등록 -->
	<insert id="registOne" parameterType="User">
		INSERT INTO `USER` (id,
		password, username, nickname, email, phone, age,
		address1, address2,
		gender, expert, goal, certificate, award, career1,
		career2, career3,
		totalcareer, profile, filePath, rating, temperature)
		VALUES (#{id},
		#{password}, #{username}, #{nickname}, #{email},
		#{phone}, #{age},
		#{address1}, #{address2}, #{gender}, #{expert},
		#{goal},
		#{certificate}, #{award}, #{career1}, #{career2}, #{career3},
		#{totalcareer}, #{profile}, #{filePath}, #{rating}, #{temperature})
	</insert>


	<!-- 로그인 -->
	<select id="login" parameterType="String" resultType="User">
		SELECT *
		FROM USER
		WHERE id = #{id} AND password = #{password}
	</select>

	<!-- 정보수정 -->
	<update id="modifyOne" parameterType="User">
		UPDATE `USER`
		SET
		password=#{password},nickname=#{nickname},email=#{email},phone=#{phone},age=#{age},address1=#{address1},address2=#{address2},goal=#{goal},certificate=#{certificate},award=#{award},career1=#{career1},career2=#{career2},career3=#{career3},totalcareer=#{totalcareer},profile=#{profile},img=#{img},expert=#{expert}
		WHERE id = #{id}
	</update>

	<!--유저탈퇴 -->
	<delete id="deleteOne" parameterType="String">
		DELETE FROM `USER`
		WHERE id
		= #{id};
	</delete>

	<!-- 팔로우 등록 -->
	<insert id="addFollow" parameterType="String">
		INSERT INTO FOLLOW
		VALUES(#{followfrom}, #{followto});
		<!-- DB에는 넣어줘야 하기 때문에 컬럼은 다 입력하자 -->
	</insert>

	<!-- 나를 팔로우하는 사용자 목록 -->
	<select id="showFollowers" parameterType="String"
		resultType="String">
		SELECT followfrom
		FROM FOLLOW
		WHERE followto =
		#{followto};
	</select>

	<!-- 내가 팔로우하는 사용자 목록 -->
	<select id="showFollows" parameterType="String"
		resultType="String">
		SELECT followto
		FROM FOLLOW
		WHERE followfrom =
		#{followfrom};
	</select>

	<!-- 팔로우 삭제 -->
	<delete id="deleteFollow" parameterType="String">
		DELETE FROM FOLLOW
		WHERE
		followfrom =#{followfrom} and followto=#{followto};
	</delete>

	<!-- 구독 온도 증가 -->
	<update id="addSubsTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature+2
		WHERE id = #{user_id};
	</update>

	<!-- 게시글 작성 온도 증가 -->
	<update id="addBoardTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature+0.5
		WHERE id = #{user_id};
	</update>

	<!-- 게시글 삭제 온도 감소 -->
	<update id="removeBoardTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature-0.5
		WHERE id = #{user_id};
	</update>

	<!-- 댓글 작성 온도 증가 -->
	<update id="addReviewTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature+0.1
		WHERE id = #{user_id};
	</update>

	<!-- 댓글 삭제 온도 감소 -->
	<update id="removeReviewTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature-0.1
		WHERE id = #{user_id};
	</update>

	<!-- 평점 리뷰 작성 온도 증가 -->
	<update id="addRatingTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature+0.3
		WHERE id = #{user_id};
	</update>

	<!-- 평점 리뷰 작성 온도 감소 -->
	<update id="removeRatingTemp" parameterType="String">
		UPDATE USER
		SET
		temperature = temperature+0.3
		WHERE id = #{user_id};
	</update>

</mapper>
